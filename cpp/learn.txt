C programming: C Tokens, Operators, Input/output, Control Statements, Looping,
Functions, Array, and String manipulations, Pointers, Structure and Data Files

C++ Programming: Function Overloading, Default Argument, concept of Class and
object, Constructor and Destructor, static Data Member and static Function, Friend
Function and Friend Classes, Operator overloading (unary, binary), Inheritance (single,
multiple, multilevel, hybrid, multipath), Pure Virtual Function, and concept of Templates
and Exception Handling

================================================================================================

C TOKENS:
=========

 -- C tokens are smallest individual unit in c , that the compiler can
 understand.
  
-- There are several type of ctokens in c:

1. Keywords :: these are the reserved word in c programming , we can't use
these word to define variable, funciton and in argurment.
(int,float,void,while,return, if ,else)

2. operators:: symbol of arthmetic (+,=,-,>,<,/,&&,||,!,!=,==) and many more.

3. separators(punctuators):: character used in separets parts of program like 
(),{},[],;,,,;.
4. setings, number constante, floating point constant.

5. identifier:: Name used for variable, functions,array etc.
 
OPERATORS:
==========

Operators are
the symbols used to do operations between operands.
1. Arthmetic operaror:(+.-,/,*,%)
2. Logical operators (&&,||,!)
3. Relational (comparision) Operators:(!=,==,<,>,<=,>=)
4. Assignment Operator: (=,+=,-=,/=,*=)
5. Increment Decrement Operator,(++,--)
6. Bitwise Operator: (&,|,<<(left shift),>>(right shift),^(xor),~(not))
7. Conditional Operator (a>b?c:d)

INPUT/OUTPUT:
==============
  char name[20];
  int a;
  printf("enter your name\n");
  scanf("%s", name);

  printf("enter your age\n");
  scanf("%d", &a);

  printf("Your name is::%s\n", name);
  printf("Your age is::%d\n", a);

CONTROL STATEMENTS:
====================

  // do while loop
  /*
  int i = 10;
  do {
    printf("*");
    i++;
    printf("\n");
  } while (i < 5);
  */

  // while loop
  /*
  while (i < 5) {
    printf("*");
    i++;
    printf("\n");
  }
  */

  // for loop
  /*
  for (int i = 0; i < 10; i++) {
    printf("*");
    printf("\n");
  }
  */

// if else statemant
  int i = 10;
  if (i < 10) {
    printf("value is less than 10");
  } else if (i == 10) {
    printf("value is equal 10");
  } else {
    printf("value greater than 10");
  }

//switch statement:

int i=1
switch(){
case 1:
  printf("value is 1");
  break;
case 3:
  printf("the value is 3");
  break;
default:
  printf("the value is unknown");
  break;
}

//conditional statement:

  i == 2 ? (printf("vv")) : (printf("a"));

FUNCITONS:
========================

int DisplayValue() {
  int a = 10;
  printf("the value is %d", a);
  return a + 10;
}

int main() {
  int c = DisplayValue();
  printf("the value is %d", c);
  return 0;
}

STRING MANUPLAITON:
=============

  string in c are null terminator i.e there will be \0 added at the end of
  every string and memory required is total character plus 1 byte.
  eg.
   for string char str[]="kushal".
   the memory consumption will be 6 letter plus one null terminator i.e 7 byte

  char str[] = "a k";

  // auto sized array;

  char str1[] = "Kcshal Chapagain";

  // string literals
  // string literals are immutable.
  // stored in read only memory.
  char *str2 = "pointer kushal";

  // other string can be change as long as we are in range
  str1[1] = 'u';

  // will give the number of character
  int length = strlen(str);

  // will total character in string +1 (null terminator)
  int l = sizeof(str) / sizeof(str[0]);

  //copy string oone to another (the destination should accomodate the source
  string)
  strcpy(str2, str1);

  // compare two string;
  // retrun 0 if the two strig are equal and if there are not equal,
  // it will return the first unequal character Ascii value difference
  // for example:
  // if str1="aa"; and str2="az";
  // then it will return ascii(a)- ascii(z)
  int a = strcmp(str2, str1);

  // append the str2 into str1
  strcat(str1, str2);


STRUCTURE(STRUCT IN C)
=================================
//struct can be used as object and can be use as the type using typedef


struct ME {
  int age;
  char name[10];
};

typedef struct {
  int age;
  char name[10];
} Infotype;

int main() {
  struct ME mystruct;
  mystruct.age = 10;
  strcpy(mystruct.name, "kushal");

  // dypedef uses
  Infotype myInfo;
  myInfo.age = 25;
  strcpy(myInfo.name, "chapagain");

  printf("the age is:: %d\n", mystruct.age);
  printf("the name is:: %s\n", mystruct.name);

  printf("the age is::typedef:: %d\n", myInfo.age);
  printf("the name is::typedef:: %s\n", myInfo.name);
  return 0;
}

POINTERS
===================

Pointer is the variable which store the memory addresses.

syntax;

type *variable_name

now the variable_name is pointer, In this variable we only store the address of
the variable.like:: 

//this will work
//when we initialize the pointer it will point to the random momory address so
we can't directly update like this (*ptr=100) , when we try to do this it tries
to overwrite the memory content with 100 which crashes;

int *ptr;
ptr=&num;
 
But if we assign ptr with new number directly like this:
*ptr=100;
no the ptr contain the attress of the num variable so when  we assign the value
100 directly to the pointer of ptr it will overwrite the num bariable 100;
 
if we need assign the value to the pointer we can use the pointer of address i.e
//this will work 
*variable_name=100;

-----------------------
int main(){

  int *ptr;
  int num = 10;

  ptr = &num;
  // by assigning the ptr 100 it will overwirte the content of address of ptr
  //(i.e num address)
  *ptr = 100;

  printf("the value of a is::%d\n", num);
  printf("the value of ptr is::%d\n", *ptr);

  return 0;
}

FILE STRUCTURE:
=====================
//for file open;

FILE *fptr;
fptr=fopen("file name ",mode)
//where mode can be "w","r","a"(append),
// w+ (read +write), r+ (read+write), a+(read+append)
//for write int the file :

// write into the file with newline
fprintf(fptr,"content");


// write into the file, newline is not added automatically.
fputs("anotherline \n",fptr);

fclose(fptr);


===========================================================================
                  DATA STRUCTURE AND ANALYSIS
===========================================================================
RedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRedRed
Time and space analysis of algorithms (Big oh, omega and theta notations). 
Stack and queue implementation and Application, Stack and Queues as list;
Dynamic implementation of linked list- Singly Linked list, Doubly Linked list, and Circular Linked list.
Concept of Tree, insertion/deletions in Binary Tree, Tree traversals,
AVL balanced trees, The Huffman algorithm, M-way search trees, B-Tree, and Red Black Tree;


SORTING- internal and external sorting,
Insertion and selection sort, Exchange sort, Merge and Redix sort, Shell sort, Heap sort, 

SEARCH- Sequential search, Binary search, General search tree, Hashing;

GRAPHS - types of graphs, representation of Graph, Transitive closure of graph,
Warshall's algorithm, Graph Traversal, Topological Sorting, 
Minimum spanning trees, Shortest-path algorithm


TIME AND SPACE COMPLEXITY:
===========================

-- Use to analyze the time and space taken my the algorithm to solve the problem
as the input changes.

There are different type of method to measure the space and time complexity:
1. Big OH (O):
-- Analyze worst case scenario.
2. Theta():
-- Analyze the avarage case scenario.
3. Omega():
-- Analyze the best case scenario.


there are severla type of complexity:
O(1): Constatnt ,
O(logn): logarithmic,
O(n): Linear ,
O(n^4): Polynomial,
O(n^2): quadratic complexity,
(NOTE:: all the quadratic complexity are polynomial but not vice versa)

o(x^n): exponential,

Here N denote the number of inputs.


STACK AND QUEUE:
===========================================
-- Stack  is the data structure where the values are store by stacking one after
another.
--If we need to retrieve the element that we first inserted, we need to retrieve
the last element we put into.

-- Data access is done in LIFO (last in first out) manner. 

Operations in Stack:
POP -> Delete / retrieve the  the element.(always done from the top of the stack)
PUSH-> Add /insert the element on stack. (always done from top of stack)
ISEmpty-> Check whether the stack is empty or not.
ISFUll-> check whether the stack is full or not?

Stack Implementation in c++

#include<iostream.h>
using namespace std;

class Stack{
private:
  int arr[6];
  int top;

public:
  Stack{
    top=-1;
  }
  void Push(value){
    if(top>=5){
      return ;
    }
    arr[++top]=value;
    cout<<value<<"::popped";
  }  

  void Pop(){
    if(top<0){
      cout<<"Stack is empty"<<endl;;
      return;
    }
    int val =arr[top--];
    cout<<val<<"::popped";
  }  
}





EMBEDDED SYSTEM::
===============================================================================================
Embedded Systems overview, Classification of Embedded Systems. Custom Single-
Purpose Processor Design, Optimizing Custom Single-Purpose Processors, Development
Environment, Application-Specific Instruction-Set Processors
Real-Time Operating and Control system, Open-loop and Close-Loop control System
overview, Control System and PID Controllers, Software coding of a PID Controller, PID
Tuning, VHDL Overview, Overflow and data representation using VHDL, Design of
combinational and sequential logic using VHDL

=============================================================================================




ROUGH::
==============
Embedded system are the system that are designed and build with specific purpose
with the specific componsnts.
componnets of embedded system:
Hardware: microcontroller, memory ,network devices, wires etc.
software: os, Drivers, and some applicaiton , Different Iot devices are the
perfect example of embedded system.

APPLICAITON:

Home appliances,(refrigenerator,smart washing machine,cctv camera,)
medical:(Different medical equipment)
sports:(different tracking equipment)
automotive:(engine control uint)
aerospace:
industrial:robotiics

CLASSIFICATION OF EMBEDDED SYSTEM:

1) Small scale embedded system;
2) Large Scale embedded system;
3) Standalone embedded system;
4) Networked ebedded system;
5) Hard-real time embedded system;
6) Soft-real time embedded system;





======================================================================================================
Emerging Technology
===============================================================================================
Introduction to Cloud Computing: Overview of cloud computing concepts and
terminologies, Cloud Deployment Models, and Cloud Service Models
Introduction to Big Data: Overview of big data concepts, characteristics, and sources,
Big Data Applications and Use Cases
Introduction to IoT: Overview of IoT concepts, terminologies, and applications, IoT in
different domains: healthcare, smart cities, agriculture; Ethical and Societal Implications
of IoT (Machine Learning and Recommendation System)

=--------------------------------------------


Cloud service models:(Iaas,Paas,Saas)

Infrastructure as a service:

CLOUD provider MANAGED:
Networking,
Storage,
servers,
Virtualization

USER MANAGED:

Operating system,
middleware,
runtime,
data,
applications

(cloud platform, azure, google cloud platform virtual maching , ec2 form amazon)

============================
Paas(Platform as a service):

Cloud Provider Managed:

Network,
Storage,
server,
virtualization,
os,
Middleware,
runtime,

User Managed:
data,
application


Deployment and hosting platform platform, google app engine,Horuku, Cloudflare etc,
(apis services and other stuff)

=========================
Saas(Software as a service):

all the department are manaegd by the service proveider,

Network,
Storage,
server,
virtualizatio,
os,
runtime,
middleware,
data,
application,

(youtube, email,facebook,chatgpt)


=======================
CLOUD DEPLOYMENT MODELS:


Private,
Public,
Community
Hybrid


============================

